import os
import asyncio
import csv
import io
from datetime import datetime

# Windows: policy for Python 3.11+ (fix "no current event loop")
if os.name == "nt":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import aiosqlite

# ===== SETTINGS =====
BOT_TOKEN = "8415156689:AAEC_fUy-vhzBvmuv1pxmB7PANNDdpPK104"
ADMIN = "@Vladz97"  # –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ @username –∞–±–æ numeric id —è–∫ —Ä—è–¥–æ–∫

# –ì–æ–ª–æ—Å—É—î –±—É–¥—å-—Ö—Ç–æ (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ)
ALLOWED_JUDGES = []

DB_PATH = "scores.db"
SCORES = list(range(0, 6))  # 0..5

# –ü–µ—Ä-—Ä–∞—É–Ω–¥–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó (—Å—É–º–∞), –∑ –µ–º–æ–¥–∂—ñ –¥–ª—è 1 —ñ 2 —Ä–∞—É–Ω–¥—É
CRITERIA_BY_ROUND = {
    1: ["üí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üß© –ö–æ–Ω—Ü–µ–ø—Ç", "üé® –í—ñ–∑—É–∞–ª—å–Ω–∞ –ø—Ä–∏–≤–∞–±–ª–∏–≤—ñ—Å—Ç—å"],
    2: ["üòÇ –ì—É–º–æ—Ä", "üé≠ –ê—Ä—Ç–∏—Å—Ç–∏–∑–º", "üåü –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–¥–µ—ó"],
}

# --- Seed words for Alias (–º–æ–∂–µ—à —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏) ---
SEED_ALIAS_WORDS = [
    "–ú–∞–≤–∫–∞","–ü–µ—Ç—Ä—É—Ü–∞–ª–µ–∫","–®–æ–ª–ª–µ—Ä","–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è","–ü–∞—Ç—ñ—Å–æ–Ω","–ê—Ä—Ç–∏–∫—É–ª","–í—ñ—Ç—Ä–∏–Ω–∞","–ï–ª—ñ—Ç–∫–∞","–ü–∞–ª–µ—Ç–∞","–°—Ç—ñ–∫–µ—Ä",
    "¬´–ß–æ—Ç–∏—Ä–∏ –∑—É—Å—Ç—Ä—ñ—á—ñ¬ª","–†–æ–ª-–∫–µ–π–¥–∂","–ó–∞–º–æ—Ä–æ–∑–∫–∞","–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–æ–±–ª—ñ–∫","–ë–æ–Ω–µ—Ç","–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å","–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π –ª–∏—Å—Ç",
    "–ß–µ–∫","–°—É–ª–∞–º—ñ—Ñ","–õ—é–ª—è-–∫–µ–±–∞–±","–í–∞–Ω—Ç–∞–∂–Ω–∏–∫","–ì–∞—Ä–±—É–∑","–í–∏—Ç–æ—Ä–≥","¬´–ú—É—Ä–∞—à–Ω–∏–∫¬ª","–ú–æ—Ä–æ–∑–∏–≤–æ","–†–∞–º–ø–∞","–®—Ç—Ä–∏—Ö–∫–æ–¥",
    "–°–∞–º–æ–∫–∞—Å–∞","–ë–æ–≥—Ä–∞—á","–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω","–°–∏—Ä–æ–≤–∏–Ω–∞","–ü–µ–Ω–µ—Ç—Ä–∞—Ü—ñ—è","–†–µ–≥–∞–ª","–ü–æ–≤–µ—Ä–µ–Ω–Ω–Ω—è","–ë–∞–≥–µ—Ç","–î–∞—à–±–æ—Ä–¥","–ö–∞—Å–∏—Ä",
    "–ü–æ—Ä–µ–π","–í—Ç—Ä–∞—Ç–∏","–ö–æ—à–∏–∫ –∑ –∫—Ä–µ–º–æ–º","–ü–∞—Ä–æ–∫–æ–Ω–≤–µ–∫—Ç–æ–º–∞—Ç","–ó–∞–≤–≥–æ—Å–ø","–î–∞—Ä–∫—Å—Ç–æ—Ä","–†–∞—Ü—ñ—è","–¢–∞—Ä–∞","–ñ—É—Ä–Ω–∞–ª","–ó–∞—Ç–∞—Ä–∫–∞",
    "–°—Ç–µ–π–∫","–¢–æ—Ä–µ—Ü—å","–ö—É—Ä‚Äô—î—Ä","–ù–∞–∫–ª–∞–¥–Ω–∞","–°—Ç–µ–ª–∞–∂","–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä","–í—ñ—Å–∫—ñ","–ü–ª–æ–≤","–ö–æ—Ä–µ–≥—É—é—á–∏–π –ø–µ—Ä–µ–æ–±–ª—ñ–∫","–ù–∞–ø–æ–ª–µ–æ–Ω",
    "–¶—ñ–Ω–Ω–∏–∫","–°–∫–æ—Ä–æ–ø–æ—Ä—Ç","–ê–π–ø–æ–¥","–ö–∞—Ä—Ç–∞–¥–æ—Ä","–ó–∞–¥–∞—á–∞","–ü–æ–ª–∏—Ü—è","–ë–µ–π–¥–∂","–ö–ª—ñ–Ω—ñ–Ω–≥","–ö–∞—Å–∏—Ä","–ü—ñ—Ü–µ—Å—Ç–∞–Ω—Ü—ñ—è","–ü–µ–Ω–µ—Ç—Ä–∞—Ü—ñ—è",
    "–í–∏–∫–ª–∞–¥–∫–∞","–ó–∞—Ä–ø–ª–∞—Ç–∞","–°–∏—Ä–æ–≤–∏–Ω–∞","–†—É–±—ñ–∫–æ–Ω","–§–æ—Ç–æ–∑–≤—ñ—Ç","–ö—É—Ä–∞—Ç–æ—Ä","–ü–µ—Ä–µ–≤–µ—Ä—à–Ω–∏–∫","–†–∞–¥—ñ—Å—Ç—å"
]

# ===== HELPERS =====
def is_admin(user) -> bool:
    if not ADMIN:
        return False
    uid = str(user.id)
    uname = (user.username or "").lower()
    admin_ids = set()
    admin_usernames = set()
    for token in str(ADMIN).split(","):
        token = token.strip()
        if not token:
            continue
        if token.isdigit():
            admin_ids.add(token)
        else:
            admin_usernames.add(token.lstrip("@").lower())
    return uid in admin_ids or (uname and uname in admin_usernames)

def judge_allowed(user) -> bool:
    # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ -> –≥–æ–ª–æ—Å—É—î –±—É–¥—å-—Ö—Ç–æ
    if not ALLOWED_JUDGES:
        return True
    uid = str(user.id)
    uname = f"@{user.username}" if user.username else None
    return uid in ALLOWED_JUDGES or (uname and uname in ALLOWED_JUDGES)

# ===== ALIAS MIGRATIONS =====
async def _migrate_alias_schema():
    """–ú—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è alias_words —Ç–∞ alias_used, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."""
    async with aiosqlite.connect(DB_PATH) as db:
        # ---- alias_words: –º—É—Å–∏—Ç—å –º–∞—Ç–∏ id INTEGER PRIMARY KEY, word UNIQUE ----
        cur = await db.execute("PRAGMA table_info(alias_words)")
        rows = await cur.fetchall()
        cols = [r[1] for r in rows]  # —ñ–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        if rows and ("id" not in cols or "word" not in cols or len(cols) == 1):
            await db.execute("""
                CREATE TABLE IF NOT EXISTS alias_words_new (
                    id INTEGER PRIMARY KEY,
                    word TEXT UNIQUE NOT NULL
                )
            """)
            if "word" in cols:
                await db.execute("INSERT OR IGNORE INTO alias_words_new(word) SELECT word FROM alias_words")
            await db.execute("DROP TABLE alias_words")
            await db.execute("ALTER TABLE alias_words_new RENAME TO alias_words")
            await db.commit()

        # ---- alias_used: –º—É—Å–∏—Ç—å –º–∞—Ç–∏ (user_id, word_id, ts) –∑ PK(user_id, word_id) ----
        cur = await db.execute("PRAGMA table_info(alias_used)")
        rows = await cur.fetchall()
        ucols = [r[1] for r in rows]
        if rows and "word_id" not in ucols:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS alias_used_new (
                    user_id INTEGER,
                    word_id INTEGER,
                    ts TEXT,
                    PRIMARY KEY (user_id, word_id)
                )
            """)
            if "word" in ucols:
                # –ø–µ—Ä–µ–Ω–µ—Å–µ–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –π–æ–≥–æ id
                await db.execute("""
                    INSERT OR IGNORE INTO alias_used_new(user_id, word_id, ts)
                    SELECT au.user_id, aw.id, au.ts
                    FROM alias_used au
                    JOIN alias_words aw ON aw.word = au.word
                """)
            await db.execute("DROP TABLE alias_used")
            await db.execute("ALTER TABLE alias_used_new RENAME TO alias_used")
            await db.commit()

# ===== DB =====
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # aggregate (sum per team per round)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS scores (
                judge_id INTEGER,
                judge_username TEXT,
                team TEXT,
                round INTEGER,
                score INTEGER,
                ts TEXT,
                PRIMARY KEY (judge_id, team, round)
            )
        """)
        # detailed by criterion
        await db.execute("""
            CREATE TABLE IF NOT EXISTS scores_detailed (
                judge_id INTEGER,
                judge_username TEXT,
                team TEXT,
                round INTEGER,
                criterion TEXT,
                raw_score INTEGER,
                weight REAL,
                ts TEXT,
                PRIMARY KEY (judge_id, team, round, criterion)
            )
        """)
        # teams: position = 1..N
        await db.execute("""
            CREATE TABLE IF NOT EXISTS teams (
                position INTEGER PRIMARY KEY,
                name TEXT NOT NULL
            )
        """)
        # dynamic rounds: id, name
        await db.execute("""
            CREATE TABLE IF NOT EXISTS rounds (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL
            )
        """)
        # alias tables (–∞–∫—Ç—É–∞–ª—å–Ω–∞ —Å—Ö–µ–º–∞)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS alias_words (
                id INTEGER PRIMARY KEY,
                word TEXT UNIQUE NOT NULL
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS alias_used (
                user_id INTEGER,
                word_id INTEGER,
                ts TEXT,
                PRIMARY KEY (user_id, word_id)
            )
        """)
        await db.commit()

    # üîß –ø—Ä–æ–≥–∞–Ω—è—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó, —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–∏ —É –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–º—É –≤–∏–≥–ª—è–¥—ñ
    await _migrate_alias_schema()

    # ---- seed –¥–∞–Ω–∏—Ö
    async with aiosqlite.connect(DB_PATH) as db:
        # teams
        cur = await db.execute("SELECT COUNT(*) FROM teams")
        (cnt,) = await cur.fetchone()
        if cnt == 0:
            defaults = [f"–ö–æ–º–∞–Ω–¥–∞ {i}" for i in range(1, 11)]
            for i, name in enumerate(defaults, start=1):
                await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (i, name))
            await db.commit()

        # rounds
        cur = await db.execute("SELECT COUNT(*) FROM rounds")
        (rcnt,) = await cur.fetchone()
        if rcnt == 0:
            await db.execute("INSERT INTO rounds(id, name) VALUES(1, ?)", ("–†–∞—É–Ω–¥ 1",))
            await db.execute("INSERT INTO rounds(id, name) VALUES(2, ?)", ("–†–∞—É–Ω–¥ 2",))
            await db.execute("INSERT INTO rounds(id, name) VALUES(3, ?)", ("–ï–ª—ñ–∞—Å",))
            await db.commit()

        # alias words
        cur = await db.execute("SELECT COUNT(*) FROM alias_words")
        (wcnt,) = await cur.fetchone()
        if wcnt == 0:
            for w in SEED_ALIAS_WORDS:
                try:
                    await db.execute("INSERT OR IGNORE INTO alias_words(word) VALUES(?)", (w.strip(),))
                except Exception:
                    pass
            await db.commit()

async def load_team_rows():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT position, name FROM teams ORDER BY position ASC")
        return await cur.fetchall()

async def load_teams():
    rows = await load_team_rows()
    return [name for _, name in rows]

async def get_team_name_by_pos(pos: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name FROM teams WHERE position=?", (pos,))
        row = await cur.fetchone()
        return row[0] if row else None

# ---- rounds DB helpers ----
async def load_rounds():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, name FROM rounds ORDER BY id ASC")
        return await cur.fetchall()  # [(id, name)]

async def add_round(name: str):
    name = name.strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞ —Ä–∞—É–Ω–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COALESCE(MAX(id), 0) FROM rounds")
        (maxid,) = await cur.fetchone()
        await db.execute("INSERT INTO rounds(id, name) VALUES(?, ?)", (maxid + 1, name))
        await db.commit()

async def rename_round(rnd_id: int, new_name: str):
    new_name = new_name.strip()
    if not new_name:
        raise ValueError("–ù–æ–≤–∞ –Ω–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COUNT(*) FROM rounds WHERE id=?", (rnd_id,))
        (exists,) = await cur.fetchone()
        if not exists:
            raise ValueError("–†–∞—É–Ω–¥ —ñ–∑ —Ç–∞–∫–∏–º id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await db.execute("UPDATE rounds SET name=? WHERE id=?", (new_name, rnd_id))
        await db.commit()

async def remove_round(rnd_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COUNT(*) FROM rounds WHERE id=?", (rnd_id,))
        (exists,) = await cur.fetchone()
        if not exists:
            raise ValueError("–†–∞—É–Ω–¥ —ñ–∑ —Ç–∞–∫–∏–º id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–∫–æ–∂ –æ—Ü—ñ–Ω–∫–∏ —Ü—å–æ–≥–æ —Ä–∞—É–Ω–¥—É
        await db.execute("DELETE FROM scores WHERE round=?", (rnd_id,))
        await db.execute("DELETE FROM scores_detailed WHERE round=?", (rnd_id,))
        await db.execute("DELETE FROM rounds WHERE id=?", (rnd_id,))
        await db.commit()

# ===== SCORE OPS =====
async def upsert_score_total(judge_id: int, judge_username: str, team: str, rnd: int, total_score: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO scores(judge_id, judge_username, team, round, score, ts)
            VALUES (?, ?, ?, ?, ?, ?)
            ON CONFLICT(judge_id, team, round)
            DO UPDATE SET score=excluded.score, ts=excluded.ts
        """, (judge_id, judge_username, team, rnd, total_score, datetime.utcnow().isoformat()))
        await db.commit()

async def upsert_score_detailed(judge_id: int, judge_username: str, team: str, rnd: int, criterion: str, raw_score: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO scores_detailed(judge_id, judge_username, team, round, criterion, raw_score, weight, ts)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(judge_id, team, round, criterion)
            DO UPDATE SET raw_score=excluded.raw_score, ts=excluded.ts
        """, (judge_id, judge_username, team, rnd, criterion, raw_score, None, datetime.utcnow().isoformat()))
        await db.commit()

async def get_scored_teams_for_judge_round(judge_id: int, rnd: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT team FROM scores WHERE judge_id=? AND round=?", (judge_id, rnd))
        rows = await cur.fetchall()
        return {r[0] for r in rows}

async def get_my_status(judge_id: int):
    teams = await load_teams()
    rounds = await load_rounds()
    round_ids = [rid for rid, _ in rounds]
    res = {r: set() for r in round_ids}
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT team, round FROM scores WHERE judge_id=?", (judge_id,)) as cur:
            async for team, rnd in cur:
                res.setdefault(rnd, set()).add(team)
    return res, teams, rounds

async def get_leaderboard(desc: bool = False):
    teams = await load_teams()
    totals = {t: 0 for t in teams}
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT team, SUM(score) FROM scores GROUP BY team") as cur:
            async for team, s in cur:
                if team in totals and s is not None:
                    totals[team] = int(s)
    ordered = sorted(totals.items(), key=lambda x: x[1], reverse=desc)
    return ordered

async def export_csv_bytes():
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')
    writer.writerow(["judge_id","judge_username","team","round","score","timestamp"])
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
            SELECT judge_id, judge_username, team, round, score, ts
            FROM scores
            ORDER BY team, round, judge_id
        """) as cur:
            async for row in cur:
                writer.writerow(row)
    return io.BytesIO(output.getvalue().encode('utf-8'))

async def reset_all():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM scores")
        await db.execute("DELETE FROM scores_detailed")
        await db.commit()

# ===== TEAMS HELPERS (—â–æ–± /removeteam –ø—Ä–∞—Ü—é–≤–∞–ª–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ) =====
async def set_teams_any(names):
    clean = [n.strip() for n in names if n.strip()]
    if len(clean) < 1 or len(clean) > 50:
        raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50.")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM teams")
        for i, name in enumerate(clean, start=1):
            await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (i, name))
        await db.commit()

async def add_team(name: str):
    name = name.strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COALESCE(MAX(position), 0) FROM teams")
        (maxpos,) = await cur.fetchone()
        await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (maxpos + 1, name))
        await db.commit()

async def remove_team(identifier: str):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º (position) –∞–±–æ –∑–∞ —Ç–æ—á–Ω–∏–º —ñ–º'—è–º. –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ—ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è 1..N."""
    async with aiosqlite.connect(DB_PATH) as db:
        pos_to_remove = None
        try:
            pos_to_remove = int(identifier)
        except ValueError:
            cur = await db.execute("SELECT position FROM teams WHERE name=?", (identifier.strip(),))
            row = await cur.fetchone()
            if row:
                pos_to_remove = row[0]

        if pos_to_remove is None:
            raise ValueError("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ü–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º/–Ω–∞–∑–≤–æ—é.")

        cur = await db.execute("SELECT name FROM teams ORDER BY position ASC")
        all_names = [r[0] for r in await cur.fetchall()]
        if pos_to_remove < 1 or pos_to_remove > len(all_names):
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∫–æ–º–∞–Ω–¥–∏.")

        new_names = [nm for i, nm in enumerate(all_names, start=1) if i != pos_to_remove]

        await db.execute("DELETE FROM teams")
        for i, name in enumerate(new_names, start=1):
            await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (i, name))
        await db.commit()

# ===== PARSING =====
def parse_teams_text(text: str):
    if "\n" in text and "," not in text:
        parts = [line.strip() for line in text.splitlines() if line.strip()]
    else:
        parts = [p.strip() for p in text.replace("\n", ",").split(",") if p.strip()]
    return parts

def split_once(cmd_text: str) -> str:
    parts = cmd_text.split(" ", 1)
    return parts[1].strip() if len(parts) > 1 else ""

# ===== HANDLERS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await init_db()
    teams = await load_teams()
    rounds = await load_rounds()
    lines = []
    lines.append("–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥.")
    lines.append(f"–ö–æ–º–∞–Ω–¥: {len(teams)}, –†–∞—É–Ω–¥—ñ–≤: {len(rounds)}, –®–∫–∞–ª–∞: 0-5.")
    for rid, rname in rounds:
        crits = CRITERIA_BY_ROUND.get(rid)
        if crits:
            lines.append(f"{rname}: " + ", ".join(crits))
        else:
            lines.append(f"{rname}: (–ø—Ä–æ—Å—Ç–∞ –æ—Ü—ñ–Ω–∫–∞)")
    lines.append("")
    lines.append("–ö–æ–º–∞–Ω–¥–∏:")
    lines.extend([f"{i}. {t}" for i, t in enumerate(teams, 1)])
    lines.append("")
    lines.append("–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:")
    lines.append("/score - –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É")
    lines.append("/mystatus - —â–æ –≤–∂–µ –æ—Ü—ñ–Ω–∏–ª–∏")
    lines.append("/leaderboard - —Ä–µ–π—Ç–∏–Ω–≥ (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è)")
    lines.append("/leaderboard_desc - —Ä–µ–π—Ç–∏–Ω–≥ (—Å–ø–∞–¥–∞–Ω–Ω—è)")
    lines.append("/teams - –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥")
    if is_admin(update.effective_user):
        lines.append("")
        lines.append("–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        lines.append("/setteams <—Å–ø–∏—Å–æ–∫> - –∑–∞–¥–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ (1..50)")
        lines.append("/addteam <–Ω–∞–∑–≤–∞> - –¥–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
        lines.append("/removeteam <‚Ññ|–Ω–∞–∑–≤–∞> - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
        lines.append("/listrnds –∞–±–æ /list_rounds - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞—É–Ω–¥–∏")
        lines.append("/addrnd <–Ω–∞–∑–≤–∞> - –¥–æ–¥–∞—Ç–∏ —Ä–∞—É–Ω–¥")
        lines.append("/renamernd <id> <–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞> - –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥")
        lines.append("/removernd <id> - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—É–Ω–¥")
        lines.append("/export - CSV")
        lines.append("/reset - –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏")
    await update.message.reply_text("\n".join(lines))

async def show_teams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    teams = await load_teams()
    txt = "–ü–æ—Ç–æ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" + "\n".join(f"{i}. {name}" for i, name in enumerate(teams, 1))
    await update.message.reply_text(txt)

# ---- rounds admin commands ----
async def list_rounds_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ —Ä–∞—É–Ω–¥—ñ–≤.")
        return
    rows = await load_rounds()
    if not rows:
        await update.message.reply_text("–†–∞—É–Ω–¥—ñ–≤ –Ω–µ–º–∞—î.")
        return
    lines = ["üìã –°–ø–∏—Å–æ–∫ —Ä–∞—É–Ω–¥—ñ–≤:"]
    for rid, name in rows:
        suffix = " (–∑ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏)" if CRITERIA_BY_ROUND.get(rid) else " (–ø—Ä–æ—Å—Ç–∞ –æ—Ü—ñ–Ω–∫–∞)"
        lines.append(f"- ID {rid}: {name}{suffix}")
    await update.message.reply_text("\n".join(lines))

async def addrnd_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É: /addrnd –ù–∞–∑–≤–∞ —Ä–∞—É–Ω–¥—É")
        return
    try:
        await add_round(rest)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–†–∞—É–Ω–¥ –¥–æ–¥–∞–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /listrnds —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

async def renamernd_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /renamernd <id> <–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞>")
        return
    parts = rest.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /renamernd <id> <–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞>")
        return
    try:
        rid = int(parts[0])
        new_name = parts[1].strip()
        await rename_round(rid, new_name)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–†–∞—É–Ω–¥ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ ‚úÖ")

async def removernd_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ä–∞—É–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /removernd <id>")
        return
    try:
        rid = int(rest)
        await remove_round(rid)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–†–∞—É–Ω–¥ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")

# ---- teams admin ----
async def setteams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥.")
        return

    provided = split_once(update.message.text)
    if provided:
        names = parse_teams_text(provided)
        try:
            await set_teams_any(names)
        except ValueError as e:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 50 –Ω–∞–∑–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞).")
            return
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")
        return

    context.user_data["awaiting_teams_input"] = True
    await update.message.reply_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (1..50): –∞–±–æ —á–µ—Ä–µ–∑ –∫–æ–º—É –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, –∞–±–æ 1 –Ω–∞–∑–≤–∞ = 1 —Ä—è–¥–æ–∫.\n"
        "–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —è –∑–±–µ—Ä–µ–∂—É —ó—Ö —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫."
    )

async def addteam_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É: /addteam –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏")
        return
    try:
        await add_team(rest)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –¥–æ–¥–∞–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

async def removeteam_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.")
        return
    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–≤–æ—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:
    # /removeteam 3
    # /removeteam –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏
    arg = update.message.text.split(" ", 1)
    ident = arg[1].strip() if len(arg) > 1 else ""
    if not ident:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å ‚Ññ –∞–±–æ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É: /removeteam 3  –∞–±–æ  /removeteam –ö–æ–º–∞–Ω–¥–∞ 3")
        return
    try:
        await remove_team(ident)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

async def handle_text_when_awaiting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_teams_input"):
        return
    if not is_admin(update.effective_user):
        await update.message.reply_text("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –∑–∞–¥–∞–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
        return

    names = parse_teams_text(update.message.text)
    try:
        await set_teams_any(names)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 50 –Ω–∞–∑–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞).")
        return

    context.user_data["awaiting_teams_input"] = False
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

# ---- scoring entry ----
async def score_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not judge_allowed(update.effective_user):
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –≤–∏ –Ω–µ —É —Å–ø–∏—Å–∫—É —Å—É–¥–¥—ñ–≤.")
        return
    rounds = await load_rounds()
    if not rounds:
        await update.message.reply_text("–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    kb = [[InlineKeyboardButton(name, callback_data=f"round:{rid}")]
          for rid, name in rounds]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–∞—É–Ω–¥:", reply_markup=InlineKeyboardMarkup(kb))

# ===== NAVIGATION + CHECKMARKS + CRITERIA / SIMPLE =====
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return
    q = update.callback_query
    await q.answer()
    data = q.data
    user_id = q.from_user.id
    username = q.from_user.username or ""

    # ---- Menu of rounds or open a specific round ----
    if data.startswith("round:"):
        arg = data.split(":", 1)[1]
        if arg == "menu":
            rounds = await load_rounds()
            kb = [[InlineKeyboardButton(name, callback_data=f"round:{rid}")]
                  for rid, name in rounds]
            await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä–∞—É–Ω–¥:", reply_markup=InlineKeyboardMarkup(kb))
            return

        rnd = int(arg)
        rows = await load_team_rows()  # [(pos, name)]
        scored = await get_scored_teams_for_judge_round(user_id, rnd)  # set of names
        kb = [[InlineKeyboardButton(f"{name}{' ‚úÖ' if name in scored else ''}", callback_data=f"team:{rnd}:{pos}")]
              for (pos, name) in rows]
        kb.append([InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")])
        await q.edit_message_text(f"–†–∞—É–Ω–¥ {rnd}. –û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", reply_markup=InlineKeyboardMarkup(kb))
        return

    # ---- Choose team -> criteria flow OR simple scoring, depending on round config ----
    if data.startswith("team:"):
        _, rnd_str, pos_str = data.split(":", 2)
        rnd = int(rnd_str)
        pos = int(pos_str)
        team = await get_team_name_by_pos(pos)
        if not team:
            await q.edit_message_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ).")
            return

        crit_list = CRITERIA_BY_ROUND.get(rnd, [])
        if crit_list:
            # criteria flow
            crit_name = crit_list[0]
            rows, row = [], []
            for s in SCORES:
                row.append(InlineKeyboardButton(str(s), callback_data=f"crit:{rnd}:{pos}:0:{s}"))
                if len(row) == 5:
                    rows.append(row)
                    row = []
            if row: rows.append(row)
            rows.append([
                InlineKeyboardButton("‚¨Ö –ö–æ–º–∞–Ω–¥–∏", callback_data=f"round:{rnd}"),
                InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")
            ])
            await q.edit_message_text(f"–†–∞—É–Ω–¥ {rnd}. {team}\n–ö—Ä–∏—Ç–µ—Ä—ñ–π: {crit_name}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–ª:",
                                      reply_markup=InlineKeyboardMarkup(rows))
        else:
            # simple scoring for this round (no criteria)
            rows, row = [], []
            for s in SCORES:
                row.append(InlineKeyboardButton(str(s), callback_data=f"score_simple:{rnd}:{pos}:{s}"))
                if len(row) == 5:
                    rows.append(row)
                    row = []
            if row: rows.append(row)
            rows.append([
                InlineKeyboardButton("‚¨Ö –ö–æ–º–∞–Ω–¥–∏", callback_data=f"round:{rnd}"),
                InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")
            ])
            await q.edit_message_text(f"–†–∞—É–Ω–¥ {rnd}. {team}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–ª:", reply_markup=InlineKeyboardMarkup(rows))
        return

    # ---- Criterion scoring (uses team position) ----
    if data.startswith("crit:"):
        _, rnd_str, pos_str, idx_str, score_str = data.split(":", 4)
        rnd = int(rnd_str)
        pos = int(pos_str)
        idx = int(idx_str)
        raw_score = int(score_str)
        if raw_score not in SCORES:
            await q.edit_message_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π –±–∞–ª. –î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ 0‚Äì5.")
            return

        team = await get_team_name_by_pos(pos)
        if not team:
            await q.edit_message_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ).")
            return

        crit_list = CRITERIA_BY_ROUND.get(rnd, [])
        if not crit_list or idx < 0 or idx >= len(crit_list):
            await q.edit_message_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π.")
            return

        crit_name = crit_list[idx]
        await upsert_score_detailed(
            judge_id=user_id,
            judge_username=username,
            team=team,
            rnd=rnd,
            criterion=crit_name,
            raw_score=raw_score
        )

        next_idx = idx + 1
        if next_idx < len(crit_list):
            next_name = crit_list[next_idx]
            rows, row = [], []
            for s in SCORES:
                row.append(InlineKeyboardButton(str(s), callback_data=f"crit:{rnd}:{pos}:{next_idx}:{s}"))
                if len(row) == 5:
                    rows.append(row)
                    row = []
            if row: rows.append(row)
            rows.append([
                InlineKeyboardButton("‚¨Ö –ö–æ–º–∞–Ω–¥–∏", callback_data=f"round:{rnd}"),
                InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")
            ])
            await q.edit_message_text(
                f"–†–∞—É–Ω–¥ {rnd}. {team}\n–ö—Ä–∏—Ç–µ—Ä—ñ–π: {next_name}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–ª:",
                reply_markup=InlineKeyboardMarkup(rows)
            )
            return
        else:
            # final SUM from DB for reliability (criteria rounds)
            total = 0
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute("""
                    SELECT SUM(raw_score) FROM scores_detailed
                    WHERE judge_id=? AND team=? AND round=?
                """, (user_id, team, rnd)) as cur:
                    row = await cur.fetchone()
                    total = int(row[0] or 0)

            await upsert_score_total(
                judge_id=user_id,
                judge_username=username,
                team=team,
                rnd=rnd,
                total_score=total
            )

            rows = await load_team_rows()
            scored = await get_scored_teams_for_judge_round(user_id, rnd)
            kb = [[InlineKeyboardButton(f"{name}{' ‚úÖ' if name in scored else ''}", callback_data=f"team:{rnd}:{p}")]
                  for (p, name) in rows]
            kb.append([InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")])

            await q.edit_message_text(
                f"‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: –†–∞—É–Ω–¥ {rnd}, {team}\n–ü—ñ–¥—Å—É–º–æ–∫ (—Å—É–º–∞ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—ó): {total}.\n–û–±–∏—Ä–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É:",
                reply_markup=InlineKeyboardMarkup(kb)
            )
            return

    # ---- Simple scoring handler (no criteria) ----
    if data.startswith("score_simple:"):
        _, rnd_str, pos_str, score_str = data.split(":", 3)
        rnd = int(rnd_str)
        pos = int(pos_str)
        score = int(score_str)
        if score not in SCORES:
            await q.edit_message_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π –±–∞–ª. –î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ 0‚Äì5.")
            return

        team = await get_team_name_by_pos(pos)
        if not team:
            await q.edit_message_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ).")
            return

        await upsert_score_total(
            judge_id=user_id,
            judge_username=username,
            team=team,
            rnd=rnd,
            total_score=score
        )

        rows = await load_team_rows()
        scored = await get_scored_teams_for_judge_round(user_id, rnd)
        kb = [[InlineKeyboardButton(f"{name}{' ‚úÖ' if name in scored else ''}", callback_data=f"team:{rnd}:{p}")]
              for (p, name) in rows]
        kb.append([InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")])

        await q.edit_message_text(
            f"‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: –†–∞—É–Ω–¥ {rnd}, {team} ‚Äî {score}.\n–û–±–∏—Ä–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ordered = await get_leaderboard(desc=False)
    lines = ["–†–µ–π—Ç–∏–Ω–≥ (–≤—ñ–¥ –Ω–∞–π–º–µ–Ω—à–æ—ó —Å—É–º–∏):"]
    for i, (team, total) in enumerate(ordered, 1):
        lines.append(f"{i}. {team} - {total}")
    await update.message.reply_text("\n".join(lines))

async def leaderboard_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ordered = await get_leaderboard(desc=True)
    lines = ["–†–µ–π—Ç–∏–Ω–≥ (–≤—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ—ó —Å—É–º–∏):"]
    for i, (team, total) in enumerate(ordered, 1):
        lines.append(f"{i}. {team} - {total}")
    await update.message.reply_text("\n".join(lines))

async def mystatus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st, teams, rounds = await get_my_status(update.effective_user.id)
    lines = ["–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å:"]
    for rid, rname in rounds:
        done = sorted(list(st.get(rid, set())))
        left = [t for t in teams if t not in st.get(rid, set())]
        lines.append(f"{rname}:")
        lines.append(f"–û—Ü—ñ–Ω–µ–Ω–æ: {len(done)}/{len(teams)}")
        if done:
            lines.append(" - " + "; ".join(done))
        if left:
            lines.append("–ó–∞–ª–∏—à–∏–ª–æ—Å—å: " + "; ".join(left))
        lines.append("")
    await update.message.reply_text("\n".join(lines).strip())

async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏.")
        return
    b = await export_csv_bytes()
    await update.message.reply_document(InputFile(b, filename="scores.csv"), caption="–ï–∫—Å–ø–æ—Ä—Ç –æ—Ü—ñ–Ω–æ–∫")

async def reset_all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Å–∫–∏–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
        return
    kb = [[
        InlineKeyboardButton("–¢–∞–∫, –æ—á–∏—â–∞—î–º–æ", callback_data="reset:yes"),
        InlineKeyboardButton("–ù—ñ", callback_data="reset:no")
    ]]
    await update.message.reply_text("–¢–æ—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏?", reply_markup=InlineKeyboardMarkup(kb))

async def reset_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if not is_admin(q.from_user):
        # FIX: –±—É–ª–æ q.reply_text(...) ‚Äî —É v21 —Ç—Ä–µ–±–∞ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —á–µ—Ä–µ–∑ message
        await q.message.reply_text("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Å–∫–∏–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
        return
    if q.data == "reset:yes":
        try:
            await reset_all()
        except Exception as e:
            await q.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á–∏—â–µ–Ω–Ω—è: {e}")
            return
        await q.edit_message_text("‚úÖ –ë–∞–∑—É –æ—á–∏—â–µ–Ω–æ (—É—Å—ñ –±–∞–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ).")
    else:
        await q.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")

# ===== Error Handler (—â–æ–± –±–∞—á–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –∞–≤–∞—Ä—ñ–π) =====
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print("Exception:", context.error)

# ===== SYNC MAIN =====
def main():
    # Fresh loop for MainThread (stable on Windows)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # Ensure DB exists
    loop.run_until_complete(init_db())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # General
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("teams", show_teams))
    app.add_handler(CommandHandler("score", score_entry))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("leaderboard_desc", leaderboard_desc))
    app.add_handler(CommandHandler("mystatus", mystatus))
    app.add_handler(CommandHandler("export", export_csv))
    app.add_handler(CommandHandler("reset", reset_all_cmd))  # FIX: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è /reset

    # Teams admin
    app.add_handler(CommandHandler("setteams", setteams))
    app.add_handler(CommandHandler("addteam", addteam_cmd))
    app.add_handler(CommandHandler("removeteam", removeteam_cmd))

    # Rounds admin
    app.add_handler(CommandHandler("list_rounds", list_rounds_cmd))
    app.add_handler(CommandHandler("listrnds", list_rounds_cmd))
    app.add_handler(CommandHandler("addrnd", addrnd_cmd))
    app.add_handler(CommandHandler("renamernd", renamernd_cmd))
    app.add_handler(CommandHandler("removernd", removernd_cmd))

    # Callbacks
    app.add_handler(CallbackQueryHandler(cb_handler, pattern=r"^(round|team|crit|score_simple):"))
    app.add_handler(CallbackQueryHandler(reset_cb, pattern=r"^reset:(yes|no)$"))

    # Catch plain text after /setteams when awaiting
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_when_awaiting))

    # Error handler
    app.add_error_handler(on_error)

    print("Bot started")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
–ü—ñ—Å–ª—è –∑–∞–º—ñ–Ω–∏ —Ñ–∞–π–ª—É –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏:
python jury_01bot.py

–¶–µ –ø—ñ–¥–Ω—ñ–º–µ –º—ñ–≥—Ä–∞—Ü—ñ—ó, –∑–±–µ—Ä–µ–∂–µ —Ç–≤–æ—ó –¥–∞–Ω—ñ —ñ –ø—Ä–∏–±–µ—Ä–µ –ø–æ–º–∏–ª–∫—É sqlite3.OperationalError: no such column: id –≤ –ï–ª—ñ–∞—Å—ñ.







–í–∏ —Å–∫–∞–∑–∞–ª–∏:
–Ω–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ñ–∞–π–ª


–ü—Ä–æ–≥—Ä–∞–º–∞ ChatGPT —Å–∫–∞–∑–∞–ª–∞:

–û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞–ª–∞ 1m 5s
–ó—Ä–æ–∑—É–º—ñ–≤. –®–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ —Ñ–∞–π–ª ‚Äú–Ω–µ —Å—Ç–∞—Ä—Ç—É—î‚Äù —á–µ—Ä–µ–∑ –æ–¥–Ω–µ –∑ —Ç–∏–ø–æ–≤–∏—Ö: –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω, –Ω–µ–º–∞ –ª–æ–≥—ñ–≤ —É –∫–æ–Ω—Å–æ–ª—ñ, –∞–±–æ –≤–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î—Ç–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É –∑ –≤–µ–±—Ö—É–∫–æ–º, –∞ –∫–æ–¥ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ poll-—Ä–µ–∂–∏–º—ñ. –Ø –¥–æ–¥–∞–≤ —É –∫–æ–¥:

–¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è;

–ø–µ—Ä–µ–≤—ñ—Ä–∫—É BOT_TOKEN –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞/–ø–æ–º–∏–ª–∫–æ–≤–∏–π;

–ø—ñ–¥—Ç—Ä–∏–º–∫—É polling —ñ webhook —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (USE_WEBHOOK, WEBHOOK_URL, WEBHOOK_PATH, PORT);

–∞–∫—É—Ä–∞—Ç–Ω–∏–π error-handler.

–°–∫–æ–ø—ñ—é–π —Ü–µ–π —Ñ–∞–π–ª –ø–æ–≤–Ω—ñ—Å—Ç—é —Ç–∞ –∑–∞–ø—É—Å—Ç–∏ –∑ –∫–æ–Ω—Å–æ–ª—ñ ‚Äî –ø–æ–º–∏–ª–∫–∏ —Ç–µ–ø–µ—Ä –±—É–¥—É—Ç—å –∑—Ä–æ–∑—É–º—ñ–ª–æ –≤–∏–¥–Ω–æ.

python
–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥
import os
import asyncio
import csv
import io
import logging
from datetime import datetime

# Windows: policy for Python 3.11+ (fix "no current event loop")
if os.name == "nt":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import aiosqlite

# ===== LOGGING =====
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("jury-bot")

# ===== SETTINGS =====
# –ú–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN; —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∏–∂—á–µ.
BOT_TOKEN = os.getenv("BOT_TOKEN") or "8415156689:AAEC_fUy-vhzBvmuv1pxmB7PANNDdpPK104"
ADMIN = "@Vladz97"  # –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ @username –∞–±–æ numeric id —è–∫ —Ä—è–¥–æ–∫

# –†–µ–∂–∏–º —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: POLLING (–ª–æ–∫–∞–ª—å–Ω–æ) –∞–±–æ WEBHOOK (—Ö–æ—Å—Ç–∏–Ω–≥)
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "0") == "1"
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()       # –Ω–∞–ø—Ä. https://your-domain.com
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/hook").strip()  # –Ω–∞–ø—Ä. /hook-—Ä–∞–Ω–¥–æ–º
PORT = int(os.getenv("PORT", "8000"))

# –ì–æ–ª–æ—Å—É—î –±—É–¥—å-—Ö—Ç–æ (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ)
ALLOWED_JUDGES = []

DB_PATH = "scores.db"
SCORES = list(range(0, 6))  # 0..5

# –ü–µ—Ä-—Ä–∞—É–Ω–¥–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó (—Å—É–º–∞), –∑ –µ–º–æ–¥–∂—ñ –¥–ª—è 1 —ñ 2 —Ä–∞—É–Ω–¥—É
CRITERIA_BY_ROUND = {
    1: ["üí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üß© –ö–æ–Ω—Ü–µ–ø—Ç", "üé® –í—ñ–∑—É–∞–ª—å–Ω–∞ –ø—Ä–∏–≤–∞–±–ª–∏–≤—ñ—Å—Ç—å"],
    2: ["üòÇ –ì—É–º–æ—Ä", "üé≠ –ê—Ä—Ç–∏—Å—Ç–∏–∑–º", "üåü –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–¥–µ—ó"],
}

# ===== HELPERS =====
def is_admin(user) -> bool:
    if not ADMIN:
        return False
    uid = str(user.id)
    uname = (user.username or "").lower()
    admin_ids = set()
    admin_usernames = set()
    for token in str(ADMIN).split(","):
        token = token.strip()
        if not token:
            continue
        if token.isdigit():
            admin_ids.add(token)
        else:
            admin_usernames.add(token.lstrip("@").lower())
    return uid in admin_ids or (uname and uname in admin_usernames)

def judge_allowed(user) -> bool:
    # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ -> –≥–æ–ª–æ—Å—É—î –±—É–¥—å-—Ö—Ç–æ
    if not ALLOWED_JUDGES:
        return True
    uid = str(user.id)
    uname = f"@{user.username}" if user.username else None
    return uid in ALLOWED_JUDGES or (uname and uname in ALLOWED_JUDGES)

# ===== DB =====
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # aggregate (sum per team per round)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS scores (
                judge_id INTEGER,
                judge_username TEXT,
                team TEXT,
                round INTEGER,
                score INTEGER,
                ts TEXT,
                PRIMARY KEY (judge_id, team, round)
            )
        """)
        # detailed by criterion
        await db.execute("""
            CREATE TABLE IF NOT EXISTS scores_detailed (
                judge_id INTEGER,
                judge_username TEXT,
                team TEXT,
                round INTEGER,
                criterion TEXT,
                raw_score INTEGER,
                weight REAL,
                ts TEXT,
                PRIMARY KEY (judge_id, team, round, criterion)
            )
        """)
        # teams: position = 1..N
        await db.execute("""
            CREATE TABLE IF NOT EXISTS teams (
                position INTEGER PRIMARY KEY,
                name TEXT NOT NULL
            )
        """)
        # dynamic rounds: id, name
        await db.execute("""
            CREATE TABLE IF NOT EXISTS rounds (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL
            )
        """)
        await db.commit()

        # seed teams if empty
        cur = await db.execute("SELECT COUNT(*) FROM teams")
        (cnt,) = await cur.fetchone()
        if cnt == 0:
            defaults = [f"–ö–æ–º–∞–Ω–¥–∞ {i}" for i in range(1, 11)]
            for i, name in enumerate(defaults, start=1):
                await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (i, name))
            await db.commit()

        # seed rounds if empty (ids 1 & 2 to match criteria mapping)
        cur = await db.execute("SELECT COUNT(*) FROM rounds")
        (rcnt,) = await cur.fetchone()
        if rcnt == 0:
            await db.execute("INSERT INTO rounds(id, name) VALUES(1, ?)", ("–†–∞—É–Ω–¥ 1",))
            await db.execute("INSERT INTO rounds(id, name) VALUES(2, ?)", ("–†–∞—É–Ω–¥ 2",))
            await db.commit()

async def load_team_rows():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT position, name FROM teams ORDER BY position ASC")
        return await cur.fetchall()

async def load_teams():
    rows = await load_team_rows()
    return [name for _, name in rows]

async def get_team_name_by_pos(pos: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT name FROM teams WHERE position=?", (pos,))
        row = await cur.fetchone()
        return row[0] if row else None

# ---- rounds DB helpers ----
async def load_rounds():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, name FROM rounds ORDER BY id ASC")
        return await cur.fetchall()  # [(id, name)]

async def add_round(name: str):
    name = name.strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞ —Ä–∞—É–Ω–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COALESCE(MAX(id), 0) FROM rounds")
        (maxid,) = await cur.fetchone()
        await db.execute("INSERT INTO rounds(id, name) VALUES(?, ?)", (maxid + 1, name))
        await db.commit()

async def rename_round(rnd_id: int, new_name: str):
    new_name = new_name.strip()
    if not new_name:
        raise ValueError("–ù–æ–≤–∞ –Ω–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COUNT(*) FROM rounds WHERE id=?", (rnd_id,))
        (exists,) = await cur.fetchone()
        if not exists:
            raise ValueError("–†–∞—É–Ω–¥ —ñ–∑ —Ç–∞–∫–∏–º id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await db.execute("UPDATE rounds SET name=? WHERE id=?", (new_name, rnd_id))
        await db.commit()

async def remove_round(rnd_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COUNT(*) FROM rounds WHERE id=?", (rnd_id,))
        (exists,) = await cur.fetchone()
        if not exists:
            raise ValueError("–†–∞—É–Ω–¥ —ñ–∑ —Ç–∞–∫–∏–º id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–∫–æ–∂ –æ—Ü—ñ–Ω–∫–∏ —Ü—å–æ–≥–æ —Ä–∞—É–Ω–¥—É
        await db.execute("DELETE FROM scores WHERE round=?", (rnd_id,))
        await db.execute("DELETE FROM scores_detailed WHERE round=?", (rnd_id,))
        await db.execute("DELETE FROM rounds WHERE id=?", (rnd_id,))
        await db.commit()

# ===== SCORE OPS =====
async def upsert_score_total(judge_id: int, judge_username: str, team: str, rnd: int, total_score: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO scores(judge_id, judge_username, team, round, score, ts)
            VALUES (?, ?, ?, ?, ?, ?)
            ON CONFLICT(judge_id, team, round)
            DO UPDATE SET score=excluded.score, ts=excluded.ts
        """, (judge_id, judge_username, team, rnd, total_score, datetime.utcnow().isoformat()))
        await db.commit()

async def upsert_score_detailed(judge_id: int, judge_username: str, team: str, rnd: int, criterion: str, raw_score: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO scores_detailed(judge_id, judge_username, team, round, criterion, raw_score, weight, ts)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(judge_id, team, round, criterion)
            DO UPDATE SET raw_score=excluded.raw_score, ts=excluded.ts
        """, (judge_id, judge_username, team, rnd, criterion, raw_score, None, datetime.utcnow().isoformat()))
        await db.commit()

async def get_scored_teams_for_judge_round(judge_id: int, rnd: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT team FROM scores WHERE judge_id=? AND round=?", (judge_id, rnd))
        rows = await cur.fetchall()
        return {r[0] for r in rows}

async def get_my_status(judge_id: int):
    teams = await load_teams()
    rounds = await load_rounds()
    round_ids = [rid for rid, _ in rounds]
    res = {r: set() for r in round_ids}
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT team, round FROM scores WHERE judge_id=?", (judge_id,)) as cur:
            async for team, rnd in cur:
                res.setdefault(rnd, set()).add(team)
    return res, teams, rounds

async def get_leaderboard(desc: bool = False):
    teams = await load_teams()
    totals = {t: 0 for t in teams}
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT team, SUM(score) FROM scores GROUP BY team") as cur:
            async for team, s in cur:
                if team in totals and s is not None:
                    totals[team] = int(s)
    ordered = sorted(totals.items(), key=lambda x: x[1], reverse=desc)
    return ordered

async def export_csv_bytes():
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')
    writer.writerow(["judge_id","judge_username","team","round","score","timestamp"])
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
            SELECT judge_id, judge_username, team, round, score, ts
            FROM scores
            ORDER BY team, round, judge_id
        """) as cur:
            async for row in cur:
                writer.writerow(row)
    return io.BytesIO(output.getvalue().encode('utf-8'))

async def reset_all():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM scores")
        await db.execute("DELETE FROM scores_detailed")
        await db.commit()

# ===== TEAMS HELPERS (—â–æ–± /removeteam –ø—Ä–∞—Ü—é–≤–∞–ª–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ) =====
async def set_teams_any(names):
    clean = [n.strip() for n in names if n.strip()]
    if len(clean) < 1 or len(clean) > 50:
        raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50.")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM teams")
        for i, name in enumerate(clean, start=1):
            await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (i, name))
        await db.commit()

async def add_team(name: str):
    name = name.strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COALESCE(MAX(position), 0) FROM teams")
        (maxpos,) = await cur.fetchone()
        await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (maxpos + 1, name))
        await db.commit()

async def remove_team(identifier: str):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º (position) –∞–±–æ –∑–∞ —Ç–æ—á–Ω–∏–º —ñ–º'—è–º. –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ—ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è 1..N."""
    async with aiosqlite.connect(DB_PATH) as db:
        pos_to_remove = None
        try:
            pos_to_remove = int(identifier)
        except ValueError:
            cur = await db.execute("SELECT position FROM teams WHERE name=?", (identifier.strip(),))
            row = await cur.fetchone()
            if row:
                pos_to_remove = row[0]

        if pos_to_remove is None:
            raise ValueError("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ü–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º/–Ω–∞–∑–≤–æ—é.")

        cur = await db.execute("SELECT name FROM teams ORDER BY position ASC")
        all_names = [r[0] for r in await cur.fetchall()]
        if pos_to_remove < 1 or pos_to_remove > len(all_names):
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∫–æ–º–∞–Ω–¥–∏.")

        new_names = [nm for i, nm in enumerate(all_names, start=1) if i != pos_to_remove]

        await db.execute("DELETE FROM teams")
        for i, name in enumerate(new_names, start=1):
            await db.execute("INSERT INTO teams(position, name) VALUES(?, ?)", (i, name))
        await db.commit()

# ===== PARSING =====
def parse_teams_text(text: str):
    if "\n" in text and "," not in text:
        parts = [line.strip() for line in text.splitlines() if line.strip()]
    else:
        parts = [p.strip() for p in text.replace("\n", ",").split(",") if p.strip()]
    return parts

def split_once(cmd_text: str) -> str:
    parts = cmd_text.split(" ", 1)
    return parts[1].strip() if len(parts) > 1 else ""

# ===== HANDLERS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await init_db()
    teams = await load_teams()
    rounds = await load_rounds()
    lines = []
    lines.append("–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥.")
    lines.append(f"–ö–æ–º–∞–Ω–¥: {len(teams)}, –†–∞—É–Ω–¥—ñ–≤: {len(rounds)}, –®–∫–∞–ª–∞: 0-5.")
    for rid, rname in rounds:
        crits = CRITERIA_BY_ROUND.get(rid)
        if crits:
            lines.append(f"{rname}: " + ", ".join(crits))
        else:
            lines.append(f"{rname}: (–ø—Ä–æ—Å—Ç–∞ –æ—Ü—ñ–Ω–∫–∞)")
    lines.append("")
    lines.append("–ö–æ–º–∞–Ω–¥–∏:")
    lines.extend([f"{i}. {t}" for i, t in enumerate(teams, 1)])
    lines.append("")
    lines.append("–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:")
    lines.append("/score - –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É")
    lines.append("/mystatus - —â–æ –≤–∂–µ –æ—Ü—ñ–Ω–∏–ª–∏")
    lines.append("/leaderboard - —Ä–µ–π—Ç–∏–Ω–≥ (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è)")
    lines.append("/leaderboard_desc - —Ä–µ–π—Ç–∏–Ω–≥ (—Å–ø–∞–¥–∞–Ω–Ω—è)")
    lines.append("/teams - –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥")
    if is_admin(update.effective_user):
        lines.append("")
        lines.append("–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        lines.append("/setteams <—Å–ø–∏—Å–æ–∫> - –∑–∞–¥–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ (1..50)")
        lines.append("/addteam <–Ω–∞–∑–≤–∞> - –¥–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
        lines.append("/removeteam <‚Ññ|–Ω–∞–∑–≤–∞> - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
        lines.append("/listrnds –∞–±–æ /list_rounds - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞—É–Ω–¥–∏")
        lines.append("/addrnd <–Ω–∞–∑–≤–∞> - –¥–æ–¥–∞—Ç–∏ —Ä–∞—É–Ω–¥")
        lines.append("/renamernd <id> <–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞> - –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥")
        lines.append("/removernd <id> - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∞—É–Ω–¥")
        lines.append("/export - CSV")
        lines.append("/reset - –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏")
    await update.message.reply_text("\n".join(lines))

async def show_teams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    teams = await load_teams()
    txt = "–ü–æ—Ç–æ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" + "\n".join(f"{i}. {name}" for i, name in enumerate(teams, 1))
    await update.message.reply_text(txt)

# ---- rounds admin commands ----
async def list_rounds_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ —Ä–∞—É–Ω–¥—ñ–≤.")
        return
    rows = await load_rounds()
    if not rows:
        await update.message.reply_text("–†–∞—É–Ω–¥—ñ–≤ –Ω–µ–º–∞—î.")
        return
    lines = ["üìã –°–ø–∏—Å–æ–∫ —Ä–∞—É–Ω–¥—ñ–≤:"]
    for rid, name in rows:
        suffix = " (–∑ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏)" if CRITERIA_BY_ROUND.get(rid) else " (–ø—Ä–æ—Å—Ç–∞ –æ—Ü—ñ–Ω–∫–∞)"
        lines.append(f"- ID {rid}: {name}{suffix}")
    await update.message.reply_text("\n".join(lines))

async def addrnd_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É: /addrnd –ù–∞–∑–≤–∞ —Ä–∞—É–Ω–¥—É")
        return
    try:
        await add_round(rest)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–†–∞—É–Ω–¥ –¥–æ–¥–∞–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /listrnds —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

async def renamernd_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É–≤–∞—Ç–∏ —Ä–∞—É–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /renamernd <id> <–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞>")
        return
    parts = rest.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /renamernd <id> <–Ω–æ–≤–∞ –Ω–∞–∑–≤–∞>")
        return
    try:
        rid = int(parts[0])
        new_name = parts[1].strip()
        await rename_round(rid, new_name)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–†–∞—É–Ω–¥ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ ‚úÖ")

async def removernd_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ä–∞—É–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /removernd <id>")
        return
    try:
        rid = int(rest)
        await remove_round(rid)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–†–∞—É–Ω–¥ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")

# ---- teams admin ----
async def setteams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥.")
        return

    provided = split_once(update.message.text)
    if provided:
        names = parse_teams_text(provided)
        try:
            await set_teams_any(names)
        except ValueError as e:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 50 –Ω–∞–∑–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞).")
            return
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")
        return

    context.user_data["awaiting_teams_input"] = True
    await update.message.reply_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (1..50): –∞–±–æ —á–µ—Ä–µ–∑ –∫–æ–º—É –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, –∞–±–æ 1 –Ω–∞–∑–≤–∞ = 1 —Ä—è–¥–æ–∫.\n"
        "–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —è –∑–±–µ—Ä–µ–∂—É —ó—Ö —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫."
    )

async def addteam_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.")
        return
    rest = split_once(update.message.text)
    if not rest:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É: /addteam –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏")
        return
    try:
        await add_team(rest)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –¥–æ–¥–∞–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

async def removeteam_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.")
        return
    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–≤–æ—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:
    # /removeteam 3
    # /removeteam –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏
    arg = update.message.text.split(" ", 1)
    ident = arg[1].strip() if len(arg) > 1 else ""
    if not ident:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å ‚Ññ –∞–±–æ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É: /removeteam 3  –∞–±–æ  /removeteam –ö–æ–º–∞–Ω–¥–∞ 3")
        return
    try:
        await remove_team(ident)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

async def handle_text_when_awaiting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_teams_input"):
        return
    if not is_admin(update.effective_user):
        await update.message.reply_text("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –∑–∞–¥–∞–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
        return

    names = parse_teams_text(update.message.text)
    try:
        await set_teams_any(names)
    except ValueError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 50 –Ω–∞–∑–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞).")
        return

    context.user_data["awaiting_teams_input"] = False
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /teams —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")

# ---- scoring entry ----
async def score_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not judge_allowed(update.effective_user):
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –≤–∏ –Ω–µ —É —Å–ø–∏—Å–∫—É —Å—É–¥–¥—ñ–≤.")
        return
    rounds = await load_rounds()
    if not rounds:
        await update.message.reply_text("–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    kb = [[InlineKeyboardButton(name, callback_data=f"round:{rid}")]
          for rid, name in rounds]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–∞—É–Ω–¥:", reply_markup=InlineKeyboardMarkup(kb))

# ===== NAVIGATION + CHECKMARKS + CRITERIA / SIMPLE =====
async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return
    q = update.callback_query
    await q.answer()
    data = q.data
    user_id = q.from_user.id
    username = q.from_user.username or ""

    # ---- Menu of rounds or open a specific round ----
    if data.startswith("round:"):
        arg = data.split(":", 1)[1]
        if arg == "menu":
            rounds = await load_rounds()
            kb = [[InlineKeyboardButton(name, callback_data=f"round:{rid}")]
                  for rid, name in rounds]
            await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä–∞—É–Ω–¥:", reply_markup=InlineKeyboardMarkup(kb))
            return

        rnd = int(arg)
        rows = await load_team_rows()  # [(pos, name)]
        scored = await get_scored_teams_for_judge_round(user_id, rnd)  # set of names
        kb = [[InlineKeyboardButton(f"{name}{' ‚úÖ' if name in scored else ''}", callback_data=f"team:{rnd}:{pos}")]
              for (pos, name) in rows]
        kb.append([InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")])
        await q.edit_message_text(f"–†–∞—É–Ω–¥ {rnd}. –û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", reply_markup=InlineKeyboardMarkup(kb))
        return

    # ---- Choose team -> criteria flow OR simple scoring, depending on round config ----
    if data.startswith("team:"):
        _, rnd_str, pos_str = data.split(":", 2)
        rnd = int(rnd_str)
        pos = int(pos_str)
        team = await get_team_name_by_pos(pos)
        if not team:
            await q.edit_message_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ).")
            return

        crit_list = CRITERIA_BY_ROUND.get(rnd, [])
        if crit_list:
            # criteria flow
            crit_name = crit_list[0]
            rows, row = [], []
            for s in SCORES:
                row.append(InlineKeyboardButton(str(s), callback_data=f"crit:{rnd}:{pos}:0:{s}"))
                if len(row) == 5:
                    rows.append(row)
                    row = []
            if row: rows.append(row)
            rows.append([
                InlineKeyboardButton("‚¨Ö –ö–æ–º–∞–Ω–¥–∏", callback_data=f"round:{rnd}"),
                InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")
            ])
            await q.edit_message_text(f"–†–∞—É–Ω–¥ {rnd}. {team}\n–ö—Ä–∏—Ç–µ—Ä—ñ–π: {crit_name}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–ª:",
                                      reply_markup=InlineKeyboardMarkup(rows))
        else:
            # simple scoring for this round (no criteria)
            rows, row = [], []
            for s in SCORES:
                row.append(InlineKeyboardButton(str(s), callback_data=f"score_simple:{rnd}:{pos}:{s}"))
                if len(row) == 5:
                    rows.append(row)
                    row = []
            if row: rows.append(row)
            rows.append([
                InlineKeyboardButton("‚¨Ö –ö–æ–º–∞–Ω–¥–∏", callback_data=f"round:{rnd}"),
                InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")
            ])
            await q.edit_message_text(f"–†–∞—É–Ω–¥ {rnd}. {team}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–ª:", reply_markup=InlineKeyboardMarkup(rows))
        return

    # ---- Criterion scoring (uses team position) ----
    if data.startswith("crit:"):
        _, rnd_str, pos_str, idx_str, score_str = data.split(":", 4)
        rnd = int(rnd_str)
        pos = int(pos_str)
        idx = int(idx_str)
        raw_score = int(score_str)
        if raw_score not in SCORES:
            await q.edit_message_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π –±–∞–ª. –î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ 0‚Äì5.")
            return

        team = await get_team_name_by_pos(pos)
        if not team:
            await q.edit_message_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ).")
            return

        crit_list = CRITERIA_BY_ROUND.get(rnd, [])
        if not crit_list or idx < 0 or idx >= len(crit_list):
            await q.edit_message_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π.")
            return

        crit_name = crit_list[idx]
        await upsert_score_detailed(
            judge_id=user_id,
            judge_username=username,
            team=team,
            rnd=rnd,
            criterion=crit_name,
            raw_score=raw_score
        )

        next_idx = idx + 1
        if next_idx < len(crit_list):
            next_name = crit_list[next_idx]
            rows, row = [], []
            for s in SCORES:
                row.append(InlineKeyboardButton(str(s), callback_data=f"crit:{rnd}:{pos}:{next_idx}:{s}"))
                if len(row) == 5:
                    rows.append(row)
                    row = []
            if row: rows.append(row)
            rows.append([
                InlineKeyboardButton("‚¨Ö –ö–æ–º–∞–Ω–¥–∏", callback_data=f"round:{rnd}"),
                InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")
            ])
            await q.edit_message_text(
                f"–†–∞—É–Ω–¥ {rnd}. {team}\n–ö—Ä–∏—Ç–µ—Ä—ñ–π: {next_name}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–ª:",
                reply_markup=InlineKeyboardMarkup(rows)
            )
            return
        else:
            # final SUM from DB for reliability (criteria rounds)
            total = 0
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute("""
                    SELECT SUM(raw_score) FROM scores_detailed
                    WHERE judge_id=? AND team=? AND round=?
                """, (user_id, team, rnd)) as cur:
                    row = await cur.fetchone()
                    total = int(row[0] or 0)

            await upsert_score_total(
                judge_id=user_id,
                judge_username=username,
                team=team,
                rnd=rnd,
                total_score=total
            )

            rows = await load_team_rows()
            scored = await get_scored_teams_for_judge_round(user_id, rnd)
            kb = [[InlineKeyboardButton(f"{name}{' ‚úÖ' if name in scored else ''}", callback_data=f"team:{rnd}:{p}")]
                  for (p, name) in rows]
            kb.append([InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")])

            await q.edit_message_text(
                f"‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: –†–∞—É–Ω–¥ {rnd}, {team}\n–ü—ñ–¥—Å—É–º–æ–∫ (—Å—É–º–∞ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—ó): {total}.\n–û–±–∏—Ä–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É:",
                reply_markup=InlineKeyboardMarkup(kb)
            )
            return

    # ---- Simple scoring handler (no criteria) ----
    if data.startswith("score_simple:"):
        _, rnd_str, pos_str, score_str = data.split(":", 3)
        rnd = int(rnd_str)
        pos = int(pos_str)
        score = int(score_str)
        if score not in SCORES:
            await q.edit_message_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π –±–∞–ª. –î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ 0‚Äì5.")
            return

        team = await get_team_name_by_pos(pos)
        if not team:
            await q.edit_message_text("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ).")
            return

        await upsert_score_total(
            judge_id=user_id,
            judge_username=username,
            team=team,
            rnd=rnd,
            total_score=score
        )

        rows = await load_team_rows()
        scored = await get_scored_teams_for_judge_round(user_id, rnd)
        kb = [[InlineKeyboardButton(f"{name}{' ‚úÖ' if name in scored else ''}", callback_data=f"team:{rnd}:{p}")]
              for (p, name) in rows]
        kb.append([InlineKeyboardButton("‚¨Ö –†–∞—É–Ω–¥–∏", callback_data="round:menu")])

        await q.edit_message_text(
            f"‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: –†–∞—É–Ω–¥ {rnd}, {team} ‚Äî {score}.\n–û–±–∏—Ä–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ordered = await get_leaderboard(desc=False)
    lines = ["–†–µ–π—Ç–∏–Ω–≥ (–≤—ñ–¥ –Ω–∞–π–º–µ–Ω—à–æ—ó —Å—É–º–∏):"]
    for i, (team, total) in enumerate(ordered, 1):
        lines.append(f"{i}. {team} - {total}")
    await update.message.reply_text("\n".join(lines))

async def leaderboard_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ordered = await get_leaderboard(desc=True)
    lines = ["–†–µ–π—Ç–∏–Ω–≥ (–≤—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ—ó —Å—É–º–∏):"]
    for i, (team, total) in enumerate(ordered, 1):
        lines.append(f"{i}. {team} - {total}")
    await update.message.reply_text("\n".join(lines))

async def mystatus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st, teams, rounds = await get_my_status(update.effective_user.id)
    lines = ["–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å:"]
    for rid, rname in rounds:
        done = sorted(list(st.get(rid, set())))
        left = [t for t in teams if t not in st.get(rid, set())]
        lines.append(f"{rname}:")
        lines.append(f"–û—Ü—ñ–Ω–µ–Ω–æ: {len(done)}/{len(teams)}")
        if done:
            lines.append(" - " + "; ".join(done))
        if left:
            lines.append("–ó–∞–ª–∏—à–∏–ª–æ—Å—å: " + "; ".join(left))
        lines.append("")
    await update.message.reply_text("\n".join(lines).strip())

async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏.")
        return
    b = await export_csv_bytes()
    await update.message.reply_document(InputFile(b, filename="scores.csv"), caption="–ï–∫—Å–ø–æ—Ä—Ç –æ—Ü—ñ–Ω–æ–∫")

async def reset_all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user):
        await update.message.reply_text("–õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Å–∫–∏–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
        return
    kb = [[
        InlineKeyboardButton("–¢–∞–∫, –æ—á–∏—â–∞—î–º–æ", callback_data="reset:yes"),
        InlineKeyboardButton("–ù—ñ", callback_data="reset:no")
    ]]
    await update.message.reply_text("–¢–æ—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏?", reply_markup=InlineKeyboardMarkup(kb))

async def reset_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if not is_admin(q.from_user):
        await q.message.reply_text("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω –º–æ–∂–µ —Å–∫–∏–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
        return
    if q.data == "reset:yes":
        try:
            await reset_all()
        except Exception as e:
            await q.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—á–∏—â–µ–Ω–Ω—è: {e}")
            return
        await q.edit_message_text("‚úÖ –ë–∞–∑—É –æ—á–∏—â–µ–Ω–æ (—É—Å—ñ –±–∞–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ).")
    else:
        await q.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")

# ===== Error Handler =====
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled exception: %s", context.error)

# ===== RUN APP (polling/webhook) =====
def run_app(app):
    if not BOT_TOKEN or len(BOT_TOKEN.split(":")) != 2:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –∞–±–æ –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º. –ó–∞–¥–∞–π –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –∞–±–æ –≤–ø–∏—à–∏ –¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω —É –∫–æ–¥—ñ.")
        raise SystemExit(1)

    if USE_WEBHOOK:
        if not WEBHOOK_URL:
            logger.error("USE_WEBHOOK=1, –∞–ª–µ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∏–π")
            raise SystemExit(1)
        full_webhook_url = WEBHOOK_URL.rstrip("/") + WEBHOOK_PATH
        logger.info("Starting in WEBHOOK mode on port %s, path %s", PORT, WEBHOOK_PATH)
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=WEBHOOK_PATH.lstrip("/"),
            webhook_url=full_webhook_url,
        )
    else:
        logger.info("Starting in POLLING mode")
        app.run_polling(close_loop=False)

# ===== SYNC MAIN =====
def main():
    # Fresh loop for MainThread (stable on Windows)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # Ensure DB exists
    loop.run_until_complete(init_db())

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # General
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("teams", show_teams))
    app.add_handler(CommandHandler("score", score_entry))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("leaderboard_desc", leaderboard_desc))
    app.add_handler(CommandHandler("mystatus", mystatus))
    app.add_handler(CommandHandler("export", export_csv))
    app.add_handler(CommandHandler("reset", reset_all_cmd))

    # Teams admin
    app.add_handler(CommandHandler("setteams", setteams))
    app.add_handler(CommandHandler("addteam", addteam_cmd))
    app.add_handler(CommandHandler("removeteam", removeteam_cmd))

    # Rounds admin
    app.add_handler(CommandHandler("list_rounds", list_rounds_cmd))
    app.add_handler(CommandHandler("listrnds", list_rounds_cmd))
    app.add_handler(CommandHandler("addrnd", addrnd_cmd))
    app.add_handler(CommandHandler("renamernd", renamernd_cmd))
    app.add_handler(CommandHandler("removernd", removernd_cmd))

    # Callbacks
    app.add_handler(CallbackQueryHandler(cb_handler, pattern=r"^(round|team|crit|score_simple):"))
    app.add_handler(CallbackQueryHandler(reset_cb, pattern=r"^reset:(yes|no)$"))

    # Catch plain text after /setteams when awaiting
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_when_awaiting))

    # Error handler
    app.add_error_handler(on_error)

    logger.info("Bot app built. Launching...")
    run_app(app)

if __name__ == "__main__":
    main()